# -*- coding: utf-8 -*-
"""Tumor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eWSOB0MDLKdVdTGGriYxVIZ6-nkW_m58
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install streamlit pillow tensorflow

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# 
# import streamlit as st
# import numpy as np
# from PIL import Image
# import tensorflow as tf
# from tensorflow.keras.preprocessing.image import img_to_array
# from tensorflow.keras.models import load_model
# import os
# 
# 
# classes = ['glioma', 'meningioma', 'no_tumor', 'pituitary']
# 
# # Load the trained model
# @st.cache_resource
# def load_custom_model():
#     model_path = '/content/drive/MyDrive/Movies/new_model.h5'
#     if not os.path.exists(model_path):
#         st.error(f"Model file not found at {model_path}")
#         return None
#     return load_model(model_path)
# 
# model = load_custom_model()
# 
# # Streamlit app
# st.title("ðŸŽ£ Custom Brain Tumour Classifier")
# st.write(f"Upload a Tumour to classify")
# 
# # File uploader
# uploaded_file = st.file_uploader("Choose an image...",
#                                 type=["jpg", "jpeg", "png"])
# 
# if uploaded_file is not None and model is not None:
#     # Display the uploaded image
#     image = Image.open(uploaded_file)
#     st.image(image, caption='Uploaded Image', use_column_width=True)
# 
#     # Preprocess the image
#     image = image.resize((224, 224))  # Match your model's expected input
#     image_array = img_to_array(image)
#     image_array = image_array / 255.0  # Normalize (if your model expects this)
#     image_array = np.expand_dims(image_array, axis=0)
# 
#     # Make prediction
#     with st.spinner('Identifying Tumour...'):
#         predictions = model.predict(image_array)
#         predicted_class = classes[np.argmax(predictions)]
#         confidence = np.max(predictions)
# 
# 
#     # Display results
#     st.subheader("Predicted Results:")
#     st.success(f"Tumour: {predicted_class}")
#     st.info(f"Confidence: {confidence*100:.2f}%")
# 
#     # Show all class probabilities
#     st.subheader("All Class Probabilities:")
#     for i, (cls, prob) in enumerate(zip(classes, predictions[0])):
#         st.write(f"{cls}: {prob*100:.2f}%")
#         st.progress(float(prob))

!wget -q -O - ipv4.icanhazip.com

! streamlit run app.py & npx localtunnel --port 8501

